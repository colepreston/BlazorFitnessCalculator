@page "/treadmill"
@inject UserDataService UserData

<PageTitle>Treadmill</PageTitle>

<h1>Treadmill Calories Burned</h1>

<EditForm Model="@formModel" OnValidSubmit="calculate">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard Style="width:380px;">
                <MudCardContent Style="width:380px;">
                    <MudNumericField Label="Speed" @bind-Value="@speed" For="@(() => speed)"/>
                    <MudNumericField Label="Time" @bind-Value="@time" For="@(() => time)"/>
                    <MudNumericField Label="Weight" @bind-Value="@formModel.Weight" For="@(() => formModel.Weight)"/>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Calculate</MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
<br/>
<MudText Typo="Typo.body1">
    <strong>Calories <MudText Color="Color.Primary">@(calories> 0 ? calories.ToString() : "N/A")</MudText></strong>
</MudText>

@code {
    private int? calories = null;
    private int? speed = null;
    private int? time = null;
    private double coefficient = .1;

    [Inject]
    private UserDataService UserDataService { get; set; }
    private UserDataModel formModel = new UserDataModel();
    protected override void OnInitialized()
    {
        // Initialize the formModel with current values of UserDataService
        formModel.Weight = UserDataService.Weight ?? null;
    }

    private void calculate()
    {
        if (formModel.Weight.HasValue && speed.HasValue && time.HasValue)
        {
            calories = Convert.ToInt32(((((coefficient * (speed.Value * 26.8)) + 3.5) * (formModel.Weight.Value / 2.2) / 200) * time.Value));
        }
        else
        {
            calories = null; // Reset calories if the calculation couldn't be performed
        }  
    }

    public class UserDataModel
    {
        public int? Weight { get; set; }
    }






}
